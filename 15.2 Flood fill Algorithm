//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        // Code here 
        
        int n=image.size();
        int m=image[0].size();
        
        queue<pair<int,int>>q;
        vector<vector<int>>vis(n,vector<int>(m,0));
        q.push({sr,sc});
        vis[sr][sc]=newColor;
        int row[]={0,+1,0,-1};
        int col[]={-1,0,+1,0};
       int color=image[sr][sc];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                
                    vis[i][j]=image[i][j];

            }}
            vis[sr][sc]=newColor;
        while(!q.empty()){
            int r=q.front().first;
            int c=q.front().second;
           
          
            q.pop();
           
            for(int i=0;i<4;i++){
                int n1=r+row[i];
                int n2=c+col[i];
                if(n1>=0&&n1<n&&n2>=0&&n2<m&&image[n1][n2]==color&&vis[n1][n2]!=newColor){
                    q.push({n1,n2});
                    vis[n1][n2]=newColor;
                }
            }
        }
             
           return vis;
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>image(n, vector<int>(m,0));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++)
				cin >> image[i][j];
		}
		int sr, sc, newColor;
		cin >> sr >> sc >> newColor;
		Solution obj;
		vector<vector<int>> ans = obj.floodFill(image, sr, sc, newColor);
		for(auto i: ans){
			for(auto j: i)
				cout << j << " ";
			cout << "\n";
		}
	}
	return 0;
}
// } Driver Code Ends
