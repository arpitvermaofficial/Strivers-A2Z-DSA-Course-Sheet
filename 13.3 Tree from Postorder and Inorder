//{ Driver Code Starts
/* program to construct tree using inorder and postorder traversals */
#include <bits/stdc++.h>
using namespace std;

/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct Node {
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x) {
        data = x;
        left = right = NULL;
    }
};

/* This funtcion is here just to test buildTreeUtil() */
void preOrder(Node* node) {
    if (node == NULL) return;

    /* then print the data of node */
    printf("%d ", node->data);

    /* first recur on left child */
    preOrder(node->left);

    /* now recur on right child */
    preOrder(node->right);
}

Node* buildTree(int in[], int post[], int n);

int main() {
    int t, n;
    cin >> t;
    while (t--) {
        cin >> n;
        int in[n], post[n];
        for (int i = 0; i < n; i++) cin >> in[i];
        for (int i = 0; i < n; i++) cin >> post[i];
        Node* root = buildTree(in, post, n);
        preOrder(root);
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends


/* Tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;

    Node(int x){
        data = x;
        left = right = NULL;
    }
};*/

//Function to return a tree created from postorder and inoreder traversals.
void help(int in[],int post[],int insi,int inei,int postsi,int postei,int n,Node* &tree){
        if(n<=0){
            tree=NULL;
            return;
        }
        tree = new Node(post[postsi]);
        int si=0;
        for(int i=insi;i<=inei;i++){
            if(in[i]==post[postsi]){
                si=i;
                break;
            }
        }
        int ll = si-insi;
        int rl = inei-si;
        help(in,post,insi,insi+ll-1,postsi-rl-1,postei,ll,tree->left);//left call
        help(in,post,insi+ll+1,inei,postsi-1,postsi-rl,rl,tree->right);//right call

    }
Node *buildTree(int in[], int post[], int n) {
    // Your code here
     Node *mynode;
        help(in,post,0,n-1,n-1,0,n,mynode);
        return mynode;
}
