//{ Driver Code Starts
// Program to find the maximum profit job sequence from a given array 
// of jobs with deadlines and profits 
#include<bits/stdc++.h>
using namespace std; 

// A structure to represent a job 
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
}; 


// } Driver Code Ends
/*
struct Job 
{ 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/

class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    static bool comp(Job a,Job b){
        if(a.profit>b.profit)
        return true;
        if(a.profit<b.profit)
        return false;
        if(a.dead>b.dead)                                                        
        return true;
         if(a.dead<b.dead)
        return false;
        if(a.id<b.id)return true;
        return false;
        
        
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        int maxdeadline=INT_MIN;
       for(int i=0;i<n;i++){
           if(arr[i].dead>maxdeadline)
           maxdeadline=arr[i].dead;
       }

       vector<int>v(maxdeadline,false);
       int profit=0,maxjob=0;
       sort(arr,arr+n,comp);
    //   for(int i=0;i<n;i++){
    //       cout<<arr[i].profit<<" "<<arr[i].dead<<endl;
    //   }
      for(int i=0;i<n;i++){
          if(v[arr[i].dead-1]==false){
              v[arr[i].dead-1]=true;
              profit+=arr[i].profit;
              maxjob++;
               
          }
          else{
              int j=arr[i].dead-2;
              bool done=false;
              while(j>=0){
                  if(v[j]==false){
                      v[j]=true;
                      done=true;
                      break;
                  }
                    j--;
              }
                  if(done){
                      maxjob++;
                      profit+=arr[i].profit;
                  }
                  
              }
          }
       
      vector<int>v2;
     
      v2.push_back(maxjob);
       v2.push_back(profit);
       return v2;
        
    } 
};

//{ Driver Code Starts.
// Driver program to test methods 
int main() 
{ 
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        Job arr[n];
        
        //adding id, deadline, profit
        for(int i = 0;i<n;i++){
                int x, y, z;
                cin >> x >> y >> z;
                arr[i].id = x;
                arr[i].dead = y;
                arr[i].profit = z;
        }
        Solution ob;
        //function call
        vector<int> ans = ob.JobScheduling(arr, n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }
	return 0; 
}



// } Driver Code Ends
