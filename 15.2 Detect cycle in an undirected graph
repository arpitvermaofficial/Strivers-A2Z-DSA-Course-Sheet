//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        for(int i=0;i<V;i++){
           if (detectcycle(i,adj,V))return true;
        }
        return false;
    }
    bool detectcycle(int src,vector<int>adj[],int V){
         vector<bool>vis(V,false);
        
        queue<pair<int,int>>q;
        q.push({src,-1});
    
        while(!q.empty()){
            int node=q.front().first;
            int parent=q.front().second;
            q.pop();
            if(vis[node]==false){
            vis[node]=true;
            
            for(int j=0;j<adj[node].size();j++){
                if(vis[adj[node][j]]==true&&adj[node][j]!=parent)
                return true;
                if(adj[node][j]!=parent)
                q.push({adj[node][j],node});
            }}
        }
        return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";
    }
    return 0;
}
// } Driver Code Ends
