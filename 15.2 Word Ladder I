//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
    int wordLadderLength(string startWord, string targetWord, vector<string>& wordList) {
        // Code here
        unordered_set<string>s;
        for(int i=0;i<wordList.size();i++)
        s.insert(wordList[i]);
        queue<pair<string,int>>q;
        q.push({startWord,1});
        s.erase(startWord);
        int min=0;
        while(!q.empty()){
            string x=q.front().first;
            int level=q.front().second;
            q.pop();
            if(x==targetWord){
                    return level;
                }
        for(int i=0;i<startWord.length();i++){
            char original=x[i];
            for(char ch='a';ch<='z';ch++){
                x[i]=ch;
                
                if(s.find(x)!=s.end()){
                    q.push({x,level+1});
                    s.erase(x);
                }
            }
            x[i]=original;
           
        }
        }
       
      
        return 0;
       
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<string>wordList(n);
		for(int i = 0; i < n; i++)cin >> wordList[i];
		string startWord, targetWord;
		cin >> startWord >> targetWord;
		Solution obj;
		int ans = obj.wordLadderLength(startWord, targetWord, wordList);
		cout << ans << "\n";
	}
	return 0;
}
// } Driver Code Ends
