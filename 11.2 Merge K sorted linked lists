//{ Driver Code Starts
// C++ program to merge k sorted arrays of size n each
#include <bits/stdc++.h>
using namespace std;

// A Linked List node
struct Node
{
	int data;
	Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};

/* Function to print nodes in a given linked list */
void printList(Node* node)
{
	while (node != NULL)
	{
		printf("%d ", node->data);
		node = node->next;
	}
	cout<<endl;
}

// } Driver Code Ends
/*Linked list Node structure

struct Node
{
	int data;
	Node* next;
	
	Node(int x){
	    data = x;
	    next = NULL;
	}
	
};
*/ 

class Solution{
  public:
    //Function to merge K sorted linked list.
    Node * mergeKLists(Node *a[], int k)
    {
           // Your code here
           // Your code here
    struct Node*root=a[0];
   if(k==1)
   return a[0];
   struct Node*h1=a[0];
   struct Node*h2=a[1];

 
   int i=1;
   while(i<k){
       h1=merge(h1,h2);
       
       i++;
       if(i<k)
       h2=a[i];
   }
   root=h1;
   return root;
    }
    Node *merge(Node*l1,Node*l2){
   struct Node*ans=new Node(-1);
   struct Node*tem=ans;
   while(l1!=NULL&&l2!=NULL){
       if(l1->data<=l2->data){
           tem->next=l1;
           l1=l1->next;
           tem=tem->next;
       }
       else{
           tem->next=l2;
           l2=l2->next;
           tem=tem->next;
       }
   }
   if(l1!=NULL){
       while(l1!=NULL){
           tem->next=l1;
           l1=l1->next;
           tem=tem->next;
       }
   }
   if(l2!=NULL){
       while(l2!=NULL){
           tem->next=l2;
           l2=l2->next;
           tem=tem->next;
       }
   }
   ans=ans->next;
   return ans;
}
};



//{ Driver Code Starts.
// Driver program to test above functions
int main()
{
   int t;
   cin>>t;
   while(t--)
   {
	   int N;
	   cin>>N;
       struct Node *arr[N];
       for(int j=0;j<N;j++)
        {
           int n;
           cin>>n;

           int x;
           cin>>x;
           arr[j]=new Node(x);
           Node *curr = arr[j];
           n--;

           for(int i=0;i<n;i++)
           {
               cin>>x;
               Node *temp = new Node(x);
               curr->next =temp;
               curr=temp;
           }
   		}
   		Solution obj;
   		Node *res = obj.mergeKLists(arr,N);
		printList(res);

   }

	return 0;
}

// } Driver Code Ends
