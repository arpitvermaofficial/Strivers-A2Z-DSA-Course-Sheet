//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    int solve(int n, int m, vector<vector<int>>& grid) {
        // code here
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,0)));
        for(int j1=0;j1<m;j1++){
            for(int j2=0;j2<m;j2++){
                if(j1==j2)
                dp[n-1][j1][j2]=grid[n-1][j1];
                else
                dp[n-1][j1][j2]=grid[n-1][j1]+grid[n-1][j2];
            }
        }
        
        for(int i=n-2;i>=0;i--){
            for(int j1=0;j1<m;j1++){
                for(int j2=0;j2<m;j2++){
                    int maxi=-1e8;
                    for(int j=-1;j<=1;j++){
                        for(int k=-1;k<=1;k++){
                            int value=0;
                            if(j1==j2)
                            value=grid[i][j1];
                            else
                            value=grid[i][j1]+grid[i][j2];
                            if(j1+j>=0&&j1+j<m&&j2+k>=0&&j2+k<m)
                            value+=dp[i+1][j1+j][j2+k];
                            else
                            value+=-1e8;
                            maxi=max(maxi,value);
                        }
        }
        dp[i][j1][j2]=maxi;
                    
                    
                }
            }
        }
        
        
        
        return dp[0][0][m-1];
        
    }
    int solve(int i,int j1,int j2,int r,int c,vector<vector<int>>grid,vector<vector<vector<int>>>&dp){
        if(j1<0||j1>=c||j2<0||j2>=c)
        return -1e9;
        if(i==r-1){
            if(j1==j2)
            return grid[i][j1];
            else 
            return grid[i][j1]+grid[i][j2]; 
        }
        if(dp[i][j1][j2]!=-1)
        return dp[i][j1][j2];
        int maxi=-1e8;
        for(int j=-1;j<=1;j++){
            for(int k=-1;k<=1;k++){
                int value=0;
                if(j1==j2)
                value=grid[i][j1];
                else
                value=grid[i][j1]+grid[i][j2];
                value+=solve(i+1,j1+j,j2+k,r,c,grid,dp);
                maxi=max(maxi,value);
            }
        }
        return dp[i][j1][j2]=maxi;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid;
        for (int i = 0; i < n; i++) {
            vector<int> temp;
            for (int j = 0; j < m; j++) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            grid.push_back(temp);
        }

        Solution obj;
        cout << obj.solve(n, m, grid) << "\n";
    }
    return 0;
}
// } Driver Code Ends
