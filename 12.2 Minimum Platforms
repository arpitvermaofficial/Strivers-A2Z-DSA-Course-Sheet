//{ Driver Code Starts
// Program to find minimum number of platforms
// required on a railway station
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
    public:
    //Function to find the minimum number of platforms required at the
    //railway station such that no train waits.
     static bool comp(pair<int,int>p1,pair<int,int>p2){
       if(p1.first<p2.first)return true;
      if(p1.first>p2.first)return false;
           if(p1.second<p2.second)return true;
           return false;
      
  }
    int findPlatform(int start[], int end[], int n)
    {
    	pair<int,int>arr[n];
        for(int i=0;i<n;i++){
            arr[i].first=start[i];
            arr[i].second=end[i];}
        sort(arr,arr+n,comp);
       
        int ans=1;
         priority_queue<int ,vector<int>, greater<int>>pq;
        pq.push(arr[0].second);
        int i=1;
        while(i<n){
            int s=arr[i].first;
            int e=arr[i].second;
            if(pq.top()<s){
                pq.pop();
            }else{
                ans++;
            }
            pq.push(e);
            i++;
        }
        return ans;
    }
   
  
};


//{ Driver Code Starts.
// Driver code
int main()
{
    int t;
    cin>>t;
    while(t--) 
    {
        int n;
        cin>>n;
        int arr[n];
        int dep[n];
        for(int i=0;i<n;i++)
            cin>>arr[i];
        for(int j=0;j<n;j++){
            cin>>dep[j];
        }
        Solution ob;
        cout <<ob.findPlatform(arr, dep, n)<<endl;
    } 
   return 0;
}
// } Driver Code Ends
