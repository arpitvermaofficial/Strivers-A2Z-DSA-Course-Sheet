//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int weight, int wt[], int val[], int n) 
    { 
       // Your code here
       vector<vector<int>>dp(n,vector<int>(weight+1,0));
       for(int i=wt[0];i<=weight;i++)
       dp[0][i]=val[0];
       for(int index=1;index<n;index++){
           for(int wt1=0;wt1<=weight;wt1++){
               int notpick=dp[index-1][wt1];
                int pick=INT_MIN;
                if(wt[index]<=wt1)
                pick=val[index]+dp[index-1][wt1-wt[index]];
               dp[index][wt1]=max(pick,notpick);
           }
       }
       return dp[n-1][weight];
    }
    int fun(int index,int weight,int wt[],int val[], vector<vector<int>>&dp){
        if(index==0){
            if(wt[index]<=weight)
            return val[index];
            return 0;
        }
        if(dp[index][weight]!=-1)
        return dp[index][weight];
        int notpick=fun(index-1,weight,wt,val,dp);
        int pick=INT_MIN;
        if(wt[index]<=weight)
        pick=val[index]+fun(index-1,weight-wt[index],wt,val,dp);
        return dp[index][weight]=max(pick,notpick);
    }
};

//{ Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}
// } Driver Code Ends
